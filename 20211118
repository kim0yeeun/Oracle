

-----------------------------------------------------11/17----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

-- 테이블 (자료형), not null, default, primary key, unique
-- insert 
-- number, char, varchar2, date, long, clob, timestamp
-- number(4), number(8,2) => number(7,2) 


select * from dba_users;

alter user ORDDATA account unlock;

create table employees (
    employee_id     number,         --컬럼명 
    first_name varchar2(20),
    last_name varchar2(20),
    hire_data date
);

drop table employees;
create table EMPLOYEES(
    EMPLOYEE_ID NUMBER(6), --- 컬럼     --- 직원번호
    FIRST_NAME VARCHAR2(20), --- 컬럼   --- 이름
    LAST_NAME VARCHAR2(25),             --- 성
    EMAIL VARCHAR2(25),                 --- 이메일
    PHONE_NUMBER VARCHAR2(20),           --- 연락처
    HIRE_DATE DATE,                     --- 입사일
    JOB_ID VARCHAR(10),                 --- 직무
    SALARY NUMBER(8,2),                 --- 급여 10000달러(소수점이하2자리)
    COMMISION_pct NUMBER(2,2),          --- 커미션
    MANAGER_ID NUMBER(6),               --- 직속상사
    DEPARTMENT_ID NUMBER(4)             --- 부서번호
);

create table DEPARTMENTS(
    DEPARTMENT_ID NUMBER(4),            --- 부서번호
    DEPARTMENT_NAME VARCHAR2(30),       --- 부서명
    MANAGER_ID NUMBER,                   --- 부서장
    LOCATION_ID NUMBER(4)                --- 주소
);

-- 만들어진 TABLE의 정보를 확인
DESCRIBE employees;
desc employees;

DESCRIBE departments;
desc departments;

insert into departments(department_id, department_name, manager_id, location_id)
values                 (300,           'Engineering',   110,        1700);
select * from departments;

insert into departments(department_id, department_name, manager_id, location_id)
values                 (400,'영업부',100,1700);

drop table employees;
drop table departments;

insert into departments(department_id, department_name, manager_id)
values                 (400,'영업부',100);

insert into departments(department_id, department_name, manager_id, location_id)
values                 (400,'영업부',200,null);

--- 컬럼리스트의 순서를 알고 모든 컬럼에 데이터를 저장
insert into departments
values (400,'영업부',300,7400);

drop table departments;

create table DEPARTMENTS(
    DEPARTMENT_ID NUMBER(4),            --- 부서번호
    DEPARTMENT_NAME VARCHAR2(30),       --- 부서명
    MANAGER_ID NUMBER,                  --- 부서장
    LOCATION_ID NUMBER(4) default 1800  --- 주소
);

insert into departments (department_idd)
values (100);

--- desc 를 통해 테이블 정보를 갖고와서 복붙하는게 가장 안전하다. 
desc departments;
insert into departments(DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID )
values (10,'ㅇㅇ',400,1500);
select * from departments;

--- 칼럼에 default 갓이 있는 경우에
--- 값을 넣지 않으면 컬럼에 있는 default 된 값이 들어간다. 
insert into departments(DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID)
values (300,'영업부',110);

insert into departments(DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID)
values (300,'영업부',110,null);

-- 값을 주지 않으면 null 
insert into departments(DEPARTMENT_ID,DEPARTMENT_NAME,LOCATION_ID)
values (300,'영업부',null);

insert into departments(DEPARTMENT_ID,DEPARTMENT_NAME)
values (300,'영업부');

insert into departments(DEPARTMENT_NAME)
values ('영업부');

insert into departments(DEPARTMENT_ID)
values (400);



--- not null 일 경우엔 무조건 값을 넣어주어야 한다. 
drop table departments;
create table DEPARTMENTS(
    DEPARTMENT_ID NUMBER(4) not null,         --- 부서번호
    DEPARTMENT_NAME VARCHAR2(30) not null,    --- 부서명
    MANAGER_ID NUMBER,                        --- 부서장
    LOCATION_ID NUMBER(4)                     --- 주소
);
insert into departments (department_id,department_name)
values (1000, '영업부');

select * from departments;

insert into departments (department_id,department_name,manager_id,location_id)
values (1000, '영업부',300,1600);

drop table departments;
create table DEPARTMENTS(
    DEPARTMENT_ID NUMBER(4) not null,         --- 부서번호
    DEPARTMENT_NAME VARCHAR2(30) not null,    --- 부서명
    MANAGER_ID NUMBER,                        --- 부서장
    LOCATION_ID NUMBER(4) default 1800        --- 주소
);

insert into departments (department_id, department_name, manager_id, location_id)
values (300,'영업부',100,1700);
insert into departments (department_id, department_name, location_id)
values (400,'기술부',1800);
insert into departments
values (500,'관리부',120,1600);
insert into departments (department_id, department_name)
values (600,'개발부');
insert into departments (department_id, department_name, manager_id)
values (600,'개발부',130);

select * from departments;

--- default값이 있는 컬럼에 null값을 주고싶다면? null을 저장
insert into departments (department_id, department_name, location_id)
values (700,'경리부',null);




drop table employees;
create table EMPLOYEES(
    employee_id NUMBER(6) not null, 
    first_name  VARCHAR2(255),
    last_name   VARCHAR2(255) not null,             
    email       VARCHAR2(255) not null,            
    phone       VARCHAR(50) not null,          
    hire_date   DATE,      
    manager_id  NUMBER,
    job_id      VARCHAR(255),                
    salary      NUMBER(8,2),                 
    commision_pct NUMBER(2,2),             
    department_id NUMBER(4)            
);

insert into employees
values (100,'예은','김','abc','010-6876-9495',
        '1995-09-25',null,null,1000,null,10);

select * from employees;

desc employees;
insert into employees (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE,HIRE_DATE)
values (101,'옝','김','yenning','010-0000-0000','2021-11-17');

-- employee에 3개의 데이터를 마음대로 입력하세요.
insert into employees
values (120,'싫엉','하기','T_T','010-1111-1111','2021/11/17',100,null,300.25,null,1800);


-- sysdate 는 현재 날짜를 가지고 올 때 사용한다. 
select sysdate from dual; -- dual은 가상의 테이블

create table EMPLOYEES(
    employee_id NUMBER not null, 
    first_name  VARCHAR2(255),
    last_name   VARCHAR2(255) not null,             
    email       VARCHAR2(255) not null,            
    phone       VARCHAR(50) not null,          
    hire_date   DATE default sysdate not null, -- default값도 있고 null을 넣으면 안된다.      
    manager_id  NUMBER,
    job_id      VARCHAR(255),                
    salary      NUMBER(8,2),                 
    commision_pct NUMBER(2,2),             
    department_id NUMBER(4)            
);

-- defalt 값이 있는 hire_Date는 값을 넣지 않아도 현재날짜가 저장된다. 
insert into employees(employee_id, last_name, email, phone)
values (120,'옌','abc','010-1111-1111');

select * from employees;

insert into employees 
values (101,'숭무','이','highland0','010 7146 1970',sysdate,null,'AC_ACC',3060.52,0.31,30);
insert into employees 
values (102,'장범','이','jangbum','010 0000 1970',sysdate+1,null,'AC_ACC',3060.52,0.31,30);

--- ※ 컬럼리스트는 웬만하면 작성해서 사용하자
--- db가 바뀌어서 프로그램에 오류 생기면 안되기 때문 꼭! 작성하자!  
insert into employees(employee_id,first_name,last_name,email,phone,hire_date,
                        manager_id,job_id,salary,commision_pct,department_id)
values (111,'Yeeun','Kim','email','010-1234-5678',sysdate+10,1,'AC_ACC',333.33,0.56,20);



--- 전체 컬럼에서 원하는 것만 확인, length는 데이터의 길이를 확인하는 함수 
select employee_id, first_name, length(first_name), email, length(email)
from employees;

create table tb1(
    col1 VARCHAR2(3),
    col2 VARCHAR2(3 Byte),
    col3 VARCHAR2(3 char)
);

insert into tb1(col1) values ('abc');
insert into tb1(col1) values ('이숭무'); -- (실제:9, 최대값:3)
insert into tb1(col2) values ('abc');
insert into tb1(col2) values ('이숭무'); -- (실제:9, 최대값:3)
insert into tb1(col3) values ('abc');
insert into tb1(col3) values ('이숭무'); -- 글자의 개수3이므로 들어간다

select * from tb1;

select * from employees;
--- 하나의 row가 하나의 data가 된다.
--- row가 모여서 하나의 table이 된다.
--- 하나의 row에는 각각의 컬럼이 존재한다 : row는 컬럼의 집합 
--- 각 컬럼은 row에 해당하는 하나의 데이터를 가지고 있다. 
--- Projection : 원하는 열(colume)만 갖고오는 것
--- selection : 원하는 행(row)만 갖고오는 것 where 사용 

select last_name, email, phone from employees; --- projection
select * from employees where employee_id=102; --- selection

--- projection & selection
select last_name, email from employees where employee_id=111;
---        projection                  selection

--- 블럭처리 해서 왼쪽 상단에 초록색 ▶ 누르면 그 부분만 처리됨 
select * from employees where employee_id=101;

insert into tb1(col1,col2,col3)
values ('abc','abc','이숭무');

select * from tb1;
select col1,length(col1),lengthb(col1) from tb1;
---              갯수          크기
select col2,length(col2),lengthb(col2) from tb1;
select col3,length(col3),lengthb(col3) from tb1;

select col1,length(col1),lengthb(col1),
       col2,length(col2),lengthb(col2),
       col3,length(col3),lengthb(col3)
from tb1;

create table tb2(
    col1 Integer,
    col2 decimal,
    col3 number ---  number(p,s) p:전체길이, s:소수점이하자리 
);
--- 테이블에 컬럼의 정보 확인 user_tab_cols;
--- object 를 만들때에는 소문자를 사용해도
--- object 정보에는 모두 대문자로 들어간다.
-- object를 사용하는 경우에는 대소문자를 구별하지 않는다.
--- search를 할 때에는 대문자로 search해야한다. 
select * from user_tab_cols
where table_name = 'TB2'; --- 대문자로 search 
insert into tb2 values(1,2,3); -- 소문자든
insert into TB2 values(1,2,3); -- 대문자든 object를 사용할 때는 상관없다. 

drop table tb3;
create table tb3 (
    col1 float(32),
    col2 float, -- (126) 정확도가 좋아진다.  
    col3 number (10,5) -- 정확도가 필요 없으면 넘버 사용
);
select * from user_tab_cols where table_name = 'TB3';

-- float : 0.123456789              : float(32)
-- doubele : 0.1234567890123456789  : float 

create table tb4 (      -- 20211117 : 세기년월일시분초
    col1 date,          -- 년월일시분초
    col2 timestamp      -- 년월일시분초미리초 
                        -- 1970년1월1일부터 현재까지의 시간을 미리초로 계산한 시간을 TIMESTAMP라고 한다. 
);

insert into tb4 values (sysdate, sysdate);
select * from tb4;
insert into tb4 values (sysdate, systimestamp);


-- primary key
create table tb5(
    col1 number,
    col2 varchar2(20)
);

insert into tb5(col1,col2) values (1,'이숭무');
insert into tb5(col1,col2) values (1,'이성범');
select * from tb5 where col1=1;
-- 중복값이 들어가지 못하도록 하자.
create table tb6 (
    col1 number PRIMARY key,
    col2 varchar2(20)
);
insert into tb6 values (1,'이숭무');
insert into tb6 values (1,'이성범'); -- 중복값이므로 저장되지 않는다,
insert into tb6 values (2,'이성범');
insert into tb6 values (3,'이숭무');

select * from tb6;
select * from tb6 where col2='이숭무';

-- primary key 는 테이블에 오직 하나만 존재해야 한다. 
-- Remove the extra primary key.
create table tb7 (
    col1 number primary key,
    email varchar2(20) --primary key
);

create table tb8 (
    col1 number primary key,
    email varchar2(20) unique
);

insert into tb8 values (1,'ab3s');
insert into tb8 values (2,'ab3s'); -- ab3s 는 중복데이터이므로 unique에 위배된다.
                                    -- 무결성 제약조건(KOSA.SYS_C008333)에 위배됩니다.
insert into tb8 values (3,'ab3s1');
-- primary key는 null값을 허용하지 않는다. default : not null
-- 반면에 unique는 중복은 허용하지 않지만 null값은 허용한다. 
insert into tb8 values (null,'ab3s2'); -- 오류 
insert into tb8 values (4,null);       -- 정상삽입 
select * from tb8;

create table tb9(
    col1 number primary key,
    email varchar2(20) unique,
    phone varchar2(13) unique not null,
    first_name varchar2(20)
);

insert into tb9 values(1,'a','1234','이숭무');
insert into tb9 values(2,null,'5678','이숭무');
insert into tb9 values(3,'','0123','이숭무');
-- ''는 null이다.
-- NULL을 ("KOSA"."TB9"."PHONE") 안에 삽입할 수 없습니다.

select * from tb9;




drop table employees;
-- employee_id인 사원번호가 있고 크기는 정수 6자리이다. primary key를 갖는다.
-- first_name인 이름이 있고 크기는 문자 20이다.
-- last_name인 성이 있고 크기는 25이며 null을 허용하지 않는다.
-- email 이 있고 null값을 허용하지 않으며 크기는 25이다. 중복을 허용하지 않는다. 
-- 연락처인 phone_number가 있고 크기는 20
-- 입사일 hire_date null을 허용하지 않으며 날짜타입
-- 직무job_id  null을 허용하지 않고 크기는 10 문자타입
-- 급여 salary 십진수 5자리와 소수점 이하 2자리가 필요
-- 커미션 commission_pct 소숫점 이하 2자리
-- 직속상사 manager_id 크기는 십진수 6자리
-- 부서 department_id 크기는 십진수 4자리 

-- 직원번호 100인 사원의 이름은 Steven이고 성은 king이며 이메일은 SKING이고 
-- 전화번호는 515.123.4567 입사일은 2005-09-21 직무는 AD_VP 급여는 17000 
-- 커미션은  직속상사는 100,  부서는 90

-- 직원번호 101인 사원의 이름은 Neena이고 성은 Kochhar이며 이메일은 NKOCHHAR이고 
-- 전화번호는 515.123.4568 입사일은 2005-09-21 직무는 AD_VP 급여는 17000 
-- 커미션은  직속상사는 100,  부서는 90

-- 직원번호 148인 사원의 이름은 Gerald이고 성은 Cambrault이며 이메일은 GCAMBRAU이고 
-- 전화번호는 011.44.1344.6192668 입사일은 2007-10-15 직무는 SA_MAN 급여는 11000 
-- 커미션은 0.3 직속상사는 100,  부서는 80. 


create table employees(
    employee_id  NUMBER(6)           PRIMARY KEY,
    first_name varchar2(20),
    last_name varchar2(25)           not null,
    email varchar2(25)               unique not null,
    phone_number varchar2(20),
    hire_date date                   not null,
    job_id varchar2(30)              not null,
    salary number(8,2), 
    commission_pct number(2,2),
    manager_id number(6),
    department_id number(4)
);
drop table employees;
insert into employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, manager_id, department_id)
values (100,'Steven','King','SKING','515.123.4567','2003-06-17','AD_PRES',24000,100,90);
insert into employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, manager_id, department_id)
values (101,'Neen','Kochhar','NKOCHHAR','515.123.4568','2005-09-21','AD_VP',17000,100,90);
insert into employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id)
values (148,'Gerald','Cambrault','GCAMBRAU','011.44.1344.6192668','2007-10-15','SA_MAN',11000,0.3,100,80);
select * from employees;


-----------------------------------------------------11/18----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

drop table departments;

create table departments(
    department_id number(4) primary key,
    department_name varchar2(30) not null,
    manager_id number(6),
    location_id number(4)
);

--select * from employees;
-- desc employees;
desc departments;
create table departments( -- table 레벨 
    department_id number(4) constraint dep_depid_PK primary key, -- 열 레벨 
    -- dep_depid_PK : 테이블명_컬럼명_프라이머리키
    department_name varchar2(30) constraint dep_depmane_nn_ not null,
    -- dep_dename_nn : not null
    manager_id number(6),
    location_id number(4)
);

select * from user_constraints where table_name = 'DEPARTMENTS';


drop table departments;
create table departments(
    department_id number(4),
    department_name varchar2(30) not null,
    manager_id number(6),
    location_id number(4),
    constraint dep_depid_pk primary key(department_id)
    -- 제약 조건     이름     무슨조건?      어디에 걸었는지 
    -- constraint dep_depNAME_NN not null(department_name)
    -- not null 은 무조건 열레벨로 정의해주어야한다. 
    -- 부적합한 식별자 invalid identifier
);
desc departments;
select * from user_constraints where table_name ='DEPARTMENTS';

insert into departments
values (10,'Excutive',100,1700);
select * from departments;
select * from employees where employee_id = 100;
-- manager_id 는 employees 테이블에 있는 것(employee_id)을 갖고온거이기 떄문에
-- employees 에 없는 (예:110, 200 등) 값을 갖고오면 안된다.
-- 정의해줘야한다! -> 왜래키 FK : foreign key 

-- 외래키 
drop table departments;
create table departments(
    department_id number(4) primary key,
    deaprtment_name varchar2(30) not null,
    manager_id number(6) references employees(employee_id),
    --                     참조      참조테이블 참조컬럼명
    -- 참조하는 애랑 넘버수가 같아야함 
    -- reference 를 하려면 참조하려는 테이블의 primary key만 가능하다.
    location_id number(4)
);

select * from user_constraints where table_name = 'EMPLOYEES';

-- 열레벨
drop table departments;
create table departments(
    department_id number(4) constraint dep_depid_pk primary key,
    deaprtment_name varchar2(30) not null,
    manager_id number(6) constraint dep_magid_fk references employees(employee_id),
    location_id number(4)
);

-- Table 레벨  주로 테이블 레벨을 사용한다 (유지보수가 편함)
drop table departments;
create table departments(
    department_id number(4) ,
    deaprtment_name varchar2(30) not null,
    manager_id number(6),
    location_id number(4),
    constraint dep_depid_pk primary key (department_id),
    constraint dep_mngid_fk foreign key (manager_id) references employees (employee_id)
);
select * from employees; 
insert into departments values (90,'Excutive',100,1700);
select * from departments;

insert into departments values(100, 'Finance',108,1700);
-- 무결성 제약조건(KOSA.DEP_MNGID_FK)이 위배되었습니다- 부모 키가 없습니다
-- manager_id 외래키 제약 조건을 걸었으므로 employee_id에 없으면 추가할 수 없다. 

delete from employees where employee_id = 100;
-- 무결성 제약조건(KOSA.DEP_MNGID_FK)이 위배되었습니다- 자식 레코드가 발견되었습니다
-- 참조하고 있는 데이터가 있기 때문에 삭제할 수 없다. 
-- employees : 부모테이블
-- departments : 자식테이블
-- 자식 테이블에 참조 키가 있는 경우 자식테이블에 데이터가 있으면
-- 부모 테이블(기본키)의 데이터는 삭제할 수 없다. 그렇다면?
delete from departments where manager_id = 100; -- 1. 자식테이블의 데이터 삭제 
delete from employees where employee_id = 100; -- 2. 부모테이블의 데이터 삭제  


-- 복합식별자
create table a (
    a1 number primary key,
    a2 number
);
insert into a values (1,1);

create table b (
    a1 number, -- a1 을 참조하겠다 : 외래키(foreign 키) -- 기본키     pk/fk
    b1 number,                                       -- 기본키     pk
    b2 number, 
    constraint b_a1_FK foreign key(a1) references a(a1),
    constraint b_a1_b1_PK primary key(a1,b1) --복합키
    -- 하나의 primary key에 컬럼을 여러개 묶어놓은 것 : 복합키 
    -- 기본키는 테이블당 무조건 하나여야한다. 
);
drop table b;
select * from a;
insert into b values (1,20,30);
insert into b values (1,20,30);
-- 무결성 제약 조건(KOSA.B_A1_PK)에 위배됩니다 
-- primary key 는 같은 값을 가질 수없다.
insert into b values (1,22,30);
-- 그런데 둘 중 하나라도 다르면 primary key가 다른 값으로 들어가서 삽입이 가능하다.
select * from b;

-- 복합키인 경우에 컬럼 값중 하나만 달라도 중복 값이 아니다. 

create table c(
    -- c가 b를 참조하려면? a1, b1 둘다 기본키이다. 그래서 둘다 참조해야한다.
    a1 number,          -- 외래키      fk    
    b1 number,          -- 외래키      fk
    c1 number,          -- 기본키      pk
    c2 number,
    constraint c_a1_b1_FK foreign key (a1,b1) references b(a1,b1),
    constraint c_c1_PK primary key (c1)
);



-- check 

insert into employees
values (100,'Steven','King','SKING','515.123.4567','2003-06-17','AD_PRES',-100,null,null,90);

select * from employees;
create table c1(
    c1 number check (c1>0),
    c2 number
);
insert into c1 values (0,1);
--체크 제약조건(KOSA.SYS_C008420)이 위배되었습니다.
insert into c1 values (1,1);
select *from c1;

-- 생성안됨 
create table c2 (
    c1 number check (c1>0),
    c2 number check (c2>c1)
    -- 열 검사제약은 다른 열을 참조할 수 없습니다.
    -- 자기 자신의 크기를 비교하는 것은 열레벨로 가능하지만
    -- 두개의 컬럼을 비교할 때는 열레벨로 사용할 수 없다. 
);
-- 테이블레벨로 하자 
create table c2 (
    c1 number,
    c2 number,
    check (c1>0), check (c2>c1)
);

insert into c2 values (1,1); -- 삽입 안됨
insert into c2 values (1,2); 
select * from user_constraints where table_name = 'C2'; -- 테이블에 있는 constraint 확인
--  보면 constraint_name 에 SYS_C008421 이렇게 이름이 없다. c3에는 이름을 붙여주자.
create table c3 (
    c1 number,
    c2 number,
    constraint c_c1_CK check (c1>0),
    constraint c_c2_CK check (c2>c1)
);

select * from user_constraints where table_name = 'C3';

drop table c4;
create table c4 (
    c1 number check (c1 between 1 and 100),
    c2 varchar2(20) check (c2 in ('a','b','c')),
    c3 varchar2(20) check (c3 in ('서울','부산','대구','대전'))
    -- c4 varchar2(20) check (c4 like '[a-f]%')
    -- like [a-f]% : a에서 f사이의 알파벳으로 시작하는 문자
);
insert into c4 values (101,'a','서울');   -- 체크 제약조건(KOSA.SYS_C008431)이 위배
insert into c4 values (100,'d','서울');   -- 체크 제약조건(KOSA.SYS_C008431)이 위배
insert into c4 values (100,'a','청주');   -- 체크 제약조건(KOSA.SYS_C008431)이 위배
insert into c4 values (100,'a','서울');   -- 삽입 성공 

-- 테이블 삭제 : drop table 테이블이름
-- 테이블 수정 : alter 
create table c5(
    c1 number,
    c2 number,
    c3 number
);
-- c3의 name 으로 컬럼명 변경을 하려면? 
alter table c5 rename column c3 to name;
desc c5;
-- name 컬럼에 number인 데이터타입을 varchar2 로 변경하려면?
alter table c5 modify name varchar2(20);
-- name 컬럼에 varchar2인 데이터타입을 number 로 변경하려면?
alter table c5 modify name number;
-- 만약 데이터가 있으면 데이터타입을 바꿀 수 없다. 
-- name varchar2 에 '이숭무' 라는 문자가 있으면 number로 바꿀 수 없다. 
alter table c5 modify name varchar2(20);
alter table c5 modify name varchar2(100);
-- 컬럼 추가하기
alter table c5 add (c4 number, c5 varchar(30));
alter table c5 add (c6 number);
-- 컬럼 삭제하기
alter table c5 drop column c6;
alter table c5 drop column (c4,c5); -- 컬럼 삭제는 하나씩만 가능하다 


drop table departments;
create table departments(
    department_id number(4) ,
    deaprtment_name varchar2(30),
    manager_id number(4)
);
desc departments;
-- location 안넣었다? number 수를 잘못 적었다? drop할 필요없이 추가하자
alter table departments add (location_id number(4));
alter table departments modify manager_id number(6);
alter table departments add first_name varchar2(20);
alter table departments drop column first_name;

-- 원래 테이블
drop table departments;
create table departments(
    department_id number(4) ,
    deaprtment_name varchar2(30) not null,
    manager_id number(6),
    location_id number(4)
);
-- 테이블에 제약조건 추가하기
-- 테이블 만들때 하는거 앞에 alter table 테이블 add만 써주면 된다 
select * from user_constraints where table_name = 'DEPARTMENTS';
alter table departments add constraint dep_depid_PK primary key(department_id);
alter table departments drop constraint dep_depid_PK;

-- 열레벨
alter table departments modify department_id constraint dep_depid_PK primary key;

-- 외래키 
alter table departments add constraint dep_mngid_fk foreign key (manager_id) references employees (employee_id);
alter table departments drop constraint dep_mngid_fk;

-- 열레벨
alter table departments modify manager_id constraint dep_mngid_fk references employees (employee_id);


-- 다지워! 
select * from user_constraints where table_name = 'DEPARTMENTS';

-- 컬럼 두개씩 변경은 가능하다. 
alter table departments modify (manager_id number(4), location_id varchar(20));
alter table departments modify (manager_id number(6), location_id number(6));

-- 제약조건 여러개 추가 및 변경 테이블레벨
alter table departments add (constraint dep_depid_pk primary key (department_id),
                            constraint dep_mngid_fk foreign key (manager_id) references employees(employee_id));
                        
-- 제약조건 여러개 추가 및 변경 열레벨 
alter table departments modify (department_id constraint dep_depid_PK primary key,
                                manager_id constraint dep_mngid_FK references employees(employee_id)
                                );
                                



drop table departments;
drop table employees;

create table employees(
    employee_id number(6),
    first_name varchar2(20),
    last_name varchar2(25),
    email varchar2(25),
    phone_number varchar2(20),
    hire_date date,
    job_id varchar2(10),
    salary number(8,2), -- 정수5자리, 소수점이하2자리
    commission_pct number(2,2), -- 소수점이하2자리
    manager_id number(6),
    department_id number(4)
);
desc employees;

create table departments(
    department_id number(4) ,
    deaprtment_name varchar2(30) not null,
    manager_id number(6),
    location_id number(4)
);

-- primary key, foreign key 만들기 
alter table employees add constraint emp_emid_PK primary key(employee_id); 

alter table departments add constraint dep_depid_PK primary key (department_id); -- 외래키로 가져오려면 primary key여야한다. 

alter table employees add constraint emp_depid_FK foreign key (department_id) references departments(department_id);

alter table departments add constraint dep_mngid_FK foreign key (manager_id) references employees(employee_id);

-- unique : UU  또는 UK 로 사용
alter table  employees add constraint emp_email_UU unique (email);

-- check : CK
alter table employees add constraint emp_salary_CK check (salary > 0);

-- not null 
alter table employees modify (last_name not null, email not null, hire_date not null, job_id not null);
alter table departments rename column deaprtment_name to department_name;          
alter table departments modify (department_name null);
alter table departments modify (department_name not null);

-- default 
alter table employees modify (hire_date default sysdate);


select * from user_constraints where table_name = 'DEPARTMENTS';
select * from user_constraints where table_name = 'EMPLOYEES';



create table job_history(
    employee_id number(6),              -- PK/FK, not null
    start_date date ,                   -- PK, not null
    end_date date,                      -- not null
    job_id varchar2(10),                -- FK, not null
    depertment_id number(4)             -- FK
);   

select * from user_cons_columns where table_name = 'JOB_HISTORY';
--- 제대로 들어갔는지 확인 

desc job_history;

select * from user_constraints where table_name = 'JOB_HISTORY';

alter table job_history add constraint jbh_empid_FK foreign key (employee_id) references employees(employee_id) ; -- 참조하려는 컬럼의 이름이 같으면 생략해줘도 된다. 
alter table job_history add constraint jbh_empid_strdate_PK primary key (employee_id,start_date);
alter table job_history modify (job_id varchar2(10));
--alter table job_history add constraint jbh_jobid_FK foreign key (job_id) references employees(employee_id);
--alter table job_history drop constraint jbh_jobid_FK;
alter table job_history rename column depertment_id to department_id;  
alter table job_history add constraint jbh_depid_FK foreign key (department_id) references departments(department_id);
alter table job_history modify (employee_id not null, start_date not null, end_date not null, job_id not null);

create table jobs (
    job_id varchar2(10),            -- PK, not null
    job_title varchar2(35),         -- not null
    min_salary number(6),
    max_salary number(6)
);

alter table jobs add constraint jbs_jbid_PK primary key (job_id);
alter table jobs modify (job_id not null, job_title not null);

desc jobs;
select * from user_constraints where table_name = 'JOBS';
select * from user_cons_columns where table_name = 'JOBS';

alter table job_history add constraint jbh_jobid_FK foreign key (job_id) references jobs(job_id);


insert into jobs (job_id, job_title, min_salary, max_salary)
values ('AD_PRES','President',20080,40000);
insert into jobs (job_id, job_title, min_salary, max_salary)
values ('AD_VP','Admonistration Vice President',15000,30000); 
select * from jobs;

-- disable 사용하지않겠다, enalbe 다시 사용하겠다.
-- 제약 조건때문에 사용이 안되는 경우에 잠시 사용을 중지 했다가 다시 사용해주자. 
alter table departments disable constraint dep_mngid_FK;
alter table departments enable constraint dep_mngid_FK;

desc departments;
insert into departments (department_id, department_name, manager_id, location_id)
values(10,'Administration',200,1700);
insert into departments (department_id, department_name, manager_id, location_id)
values(20,'Marketing',201,1800);

-- sql 파일 열기 - 전체선택 - 초록색 ▶ 누르면 알아서 삽입됨 
-- departments, employees, jobs, 파일 불러온 후 select로 확인
-- 이제 departments 를 enable해도된다. 

select * from departments;      -- 27
select * from employees;        -- 107
select * from jobs;             -- 19

alter table departments enable constraint dep_mngid_FK;

desc job_history;

insert into job_history (employee_id, start_date, end_date, job_id, department_id)
values (102,'2001-1-13','2006-07-24','IT_PROG',60);
-- ~ 사원이 ~부터~ 까지 ~직무를 ~부서에서 일을 했다
insert into job_history (employee_id, start_date, end_date, job_id, department_id)
values (101,'1997-09-21','2001-10-27','AC_ACCOUNT',110);
-- 101번 사원이 1997부터 2001년 10월 27일까지 account직무를 110번 부서에서 일을 했다. 
insert into job_history (employee_id, start_date, end_date, job_id, department_id)
values (101,'2001-10-28','2005-03-15','AC_MRG',110);
-- 101번 사원이 2001년 10월 28일부터 2005까지 회계관리직무를 110번 부서에서 일을했다.  

-- sql 파일 열기 - 전체선택 - 초록색 ▶ 누르면 알아서 삽입됨 
-- job_history 파일 불러온 후 select로 확인
select * from departments;      -- 27
select * from employees;        -- 107
select * from jobs;             -- 19
select * from job_history;      -- 10

select * from user_constraints where table_name = 'EMPLOYEES';
select * from user_cons_columns where table_name = 'EMPLOYEES';
-- 제약조건에 따른 컬럼 확인하기 위한 것 

alter table employees add constraint emp_jobs_id_FK foreign key (job_id) references jobs;



-- index
select * from employees
where first_name = 'Lex';

create index first_name_IDX on employees(first_name);
--           라는 이름을        테이블에있는 컬럼에    인덱스를 만들겠다
-- 인덱스를 만들고 select를 하면 자동으로 index가 실행된다. 
-- index 는 where 조건절에서 주로 사용되는 column 에 만든다.

-- 인덱스 삭제 
drop index first_name_IDX;

alter table c drop constraint c_c1_PK;
alter table c add constraint c_PK primary key (c1,c2);
-- primary key르 만들면 자동으로 인덱스가 만들어진다.
-- 그 순서나 개수에 따라서 인덱스 속도도 달라진다. 
-- 정렬이 되어 있는 컬럼일수록 앞쪽에 두는 것이 효율적이다. 
-- 자주 사용되는 컬럼부터 앞에 오는 것이 좋다. 
-- 인덱스가 많다고 좋은건 아니다. 필요한 곳에만 인덱스를 만들어서 사용하자. 
-- index는 select 할 때 사용한다. 
-- index는 insert, delete, update시 index를 조회한 후 사용해야 되는 경우 시스템 성능에 영향을 줄 수 있다. 사용하지 않는 게 좋다. 
select * from employees where employee_id = 100;

-- 시퀀스 : 번호 자동 생성기 
select * from employees;
create sequence seq_num             -- 시퀀스 이름
increment by 1                      -- 증가분
start with 207                      -- 시작번호
maxvalue 99999999                   -- 끝번호
nocycle                             -- 최대나 최소에 도달할 때 반복의 유무 
nocache;                            -- 미리 할당된 시퀀스 값

create sequence seq_num;
select seq_num.nextval from dual;   -- 다음 사용할 값
select seq_num.currval from dual;   -- 현재 사용하는 값

desc c1; -- 처음엔 c1,c2 1 1 로 존재 
insert into c1(c1,c2) values (seq_num.nextval,1); -- 넣은대로 계속 1씩 증가하면서 삽입됨 
select * from c1;

insert into departments 
values (seq_num.nextval,'TEST',100,1500); --  departments 에 test로 1씩 증가해서 들어가는 값을 알 수 있다. 

select * from departments;